package com.grupo2.tpteo1grupo2;
import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.sym;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
/* The following code was generated by JFlex 1.7.0 */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>./Ejemplo.flex</tt>
 */
public class Lexico implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\14\1\4"+
    "\5\0\1\14\1\14\1\23\1\23\1\14\1\24\1\10\1\25\1\11"+
    "\1\13\10\6\1\50\1\17\1\20\1\21\1\22\1\14\1\0\1\26"+
    "\1\46\1\44\1\30\1\41\1\40\1\45\1\43\1\35\2\5\1\34"+
    "\1\51\1\27\1\31\1\33\1\5\1\32\1\36\1\37\1\47\1\5"+
    "\1\42\1\5\2\5\1\15\1\0\1\16\1\0\1\7\1\0\1\5"+
    "\1\12\30\5\1\14\1\0\1\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\1\1\4"+
    "\1\5\3\6\2\7\13\3\1\1\1\0\1\10\1\11"+
    "\2\0\1\12\5\3\1\13\12\3\1\14\1\0\1\15"+
    "\1\0\10\3\1\16\6\3\1\17\1\12\6\3\1\20"+
    "\10\3\1\21\5\3\1\22\3\3\1\23\1\3\1\24"+
    "\2\3\1\25\2\3\1\26\1\27\2\3\1\30\2\3"+
    "\1\31\3\3\1\32\3\3\1\0\1\3\1\33\1\34"+
    "\3\3\1\35\3\0\2\3\1\36\3\0\2\3\3\0"+
    "\2\3\24\0\1\37\2\0\1\40\6\0\1\41\2\0"+
    "\1\42\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\52\0\176\0\250\0\322\0\374"+
    "\0\u0126\0\52\0\u0150\0\52\0\u017a\0\52\0\u01a4\0\u01ce"+
    "\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e"+
    "\0\u0348\0\u0372\0\u039c\0\176\0\52\0\374\0\u03c6\0\u03f0"+
    "\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\250\0\u0516"+
    "\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666"+
    "\0\u0690\0\52\0\u06ba\0\u03c6\0\u06e4\0\u070e\0\u0738\0\u0762"+
    "\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2"+
    "\0\u08dc\0\u0906\0\u0930\0\u095a\0\52\0\52\0\u0984\0\u09ae"+
    "\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\250\0\u0a80\0\u0aaa\0\u0ad4"+
    "\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\250\0\u0bd0\0\u0bfa"+
    "\0\u0c24\0\u0c4e\0\u0c78\0\250\0\u0ca2\0\u0ccc\0\u0cf6\0\250"+
    "\0\u0d20\0\250\0\u0d4a\0\u0d74\0\250\0\u0d9e\0\u0dc8\0\250"+
    "\0\250\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\250\0\u0ec4"+
    "\0\u0eee\0\u0f18\0\250\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea"+
    "\0\250\0\250\0\u1014\0\u103e\0\u1068\0\250\0\u1092\0\u10bc"+
    "\0\u10e6\0\u1110\0\u113a\0\250\0\u1164\0\u118e\0\u11b8\0\u11e2"+
    "\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332"+
    "\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482"+
    "\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2"+
    "\0\u15fc\0\u1626\0\52\0\u1650\0\u167a\0\52\0\u16a4\0\u16ce"+
    "\0\u16f8\0\u1722\0\u174c\0\u1776\0\52\0\u17a0\0\u17ca\0\52"+
    "\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\6\1\7\4\12\1\13\1\14\1\15\2\16"+
    "\1\17\2\6\1\20\1\21\1\22\1\23\1\6\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\3\6\1\32\1\6"+
    "\1\33\1\6\54\0\1\4\47\0\1\34\2\0\1\34"+
    "\1\35\45\34\5\0\3\6\1\0\3\6\12\0\22\6"+
    "\1\0\1\6\6\0\1\7\1\0\1\36\1\7\1\0"+
    "\1\7\44\0\1\36\2\0\1\36\1\0\1\36\44\0"+
    "\1\7\1\0\1\36\1\7\1\37\1\7\57\0\2\14"+
    "\2\0\1\40\45\0\1\14\55\0\1\41\31\0\3\6"+
    "\1\0\3\6\12\0\13\6\1\42\6\6\1\0\1\6"+
    "\5\0\3\6\1\0\3\6\12\0\5\6\1\43\14\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\1\44"+
    "\21\6\1\0\1\6\5\0\3\6\1\0\3\6\12\0"+
    "\4\6\1\45\15\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\1\6\1\46\10\6\1\47\7\6\1\0"+
    "\1\6\5\0\3\6\1\0\3\6\12\0\11\6\1\50"+
    "\10\6\1\0\1\6\5\0\3\6\1\0\3\6\12\0"+
    "\4\6\1\51\15\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\1\52\2\6\1\53\2\6\1\54\13\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\1\6"+
    "\1\55\4\6\1\56\13\6\1\0\1\6\5\0\3\6"+
    "\1\0\3\6\12\0\4\6\1\57\10\6\1\60\4\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\3\6"+
    "\1\61\16\6\1\0\1\6\21\0\1\62\26\0\1\63"+
    "\12\0\1\64\1\0\1\64\37\0\3\40\1\0\2\40"+
    "\2\0\7\40\5\0\1\65\22\40\1\0\1\40\1\0"+
    "\3\41\1\0\2\41\2\0\7\41\6\0\22\41\1\0"+
    "\1\41\5\0\3\6\1\0\3\6\12\0\16\6\1\66"+
    "\3\6\1\0\1\6\5\0\3\6\1\0\3\6\12\0"+
    "\6\6\1\67\13\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\1\6\1\70\20\6\1\0\1\6\5\0"+
    "\3\6\1\0\3\6\12\0\3\6\1\71\16\6\1\0"+
    "\1\6\5\0\3\6\1\0\3\6\12\0\11\6\1\72"+
    "\10\6\1\0\1\6\5\0\3\6\1\0\3\6\12\0"+
    "\4\6\1\73\15\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\21\6\1\74\1\0\1\6\5\0\3\6"+
    "\1\0\3\6\12\0\6\6\1\75\13\6\1\0\1\6"+
    "\5\0\3\6\1\0\3\6\12\0\4\6\1\76\15\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\3\6"+
    "\1\77\16\6\1\0\1\6\5\0\3\6\1\0\3\6"+
    "\12\0\2\6\1\100\17\6\1\0\1\6\5\0\3\6"+
    "\1\0\3\6\12\0\10\6\1\101\11\6\1\0\1\6"+
    "\5\0\3\6\1\0\3\6\12\0\7\6\1\102\12\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\7\6"+
    "\1\103\12\6\1\0\1\6\5\0\3\6\1\0\3\6"+
    "\12\0\3\6\1\104\16\6\1\0\1\6\21\0\1\105"+
    "\52\0\1\106\34\0\3\6\1\0\3\6\12\0\6\6"+
    "\1\107\13\6\1\0\1\6\5\0\3\6\1\0\3\6"+
    "\12\0\7\6\1\110\12\6\1\0\1\6\5\0\3\6"+
    "\1\0\3\6\12\0\17\6\1\111\2\6\1\0\1\6"+
    "\5\0\3\6\1\0\3\6\12\0\17\6\1\112\2\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\13\6"+
    "\1\113\6\6\1\0\1\6\5\0\3\6\1\0\3\6"+
    "\12\0\7\6\1\114\12\6\1\0\1\6\5\0\3\6"+
    "\1\0\3\6\12\0\13\6\1\115\6\6\1\0\1\6"+
    "\5\0\3\6\1\0\3\6\12\0\10\6\1\116\11\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\13\6"+
    "\1\117\6\6\1\0\1\6\5\0\3\6\1\0\3\6"+
    "\12\0\1\120\21\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\2\6\1\121\2\6\1\122\1\6\1\123"+
    "\2\6\1\124\1\6\1\125\5\6\1\0\1\6\5\0"+
    "\3\6\1\0\3\6\12\0\13\6\1\126\6\6\1\0"+
    "\1\6\5\0\3\6\1\0\3\6\12\0\11\6\1\127"+
    "\10\6\1\0\1\6\5\0\3\6\1\0\3\6\12\0"+
    "\6\6\1\130\13\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\6\6\1\131\13\6\1\0\1\6\5\0"+
    "\3\6\1\0\3\6\12\0\1\132\21\6\1\0\1\6"+
    "\5\0\3\6\1\0\3\6\12\0\10\6\1\133\11\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\13\6"+
    "\1\134\6\6\1\0\1\6\5\0\3\6\1\0\3\6"+
    "\12\0\4\6\1\135\15\6\1\0\1\6\5\0\3\6"+
    "\1\0\3\6\12\0\17\6\1\136\2\6\1\0\1\6"+
    "\5\0\3\6\1\0\3\6\12\0\1\6\1\137\20\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\13\6"+
    "\1\140\6\6\1\0\1\6\5\0\3\6\1\0\3\6"+
    "\12\0\1\141\21\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\11\6\1\142\10\6\1\0\1\6\5\0"+
    "\3\6\1\0\3\6\12\0\13\6\1\143\6\6\1\0"+
    "\1\6\5\0\3\6\1\0\3\6\12\0\4\6\1\144"+
    "\15\6\1\0\1\6\5\0\3\6\1\0\3\6\12\0"+
    "\12\6\1\145\7\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\3\6\1\146\16\6\1\0\1\6\5\0"+
    "\3\6\1\0\3\6\12\0\15\6\1\147\4\6\1\0"+
    "\1\6\5\0\3\6\1\0\3\6\12\0\13\6\1\150"+
    "\6\6\1\0\1\6\5\0\3\6\1\0\3\6\12\0"+
    "\13\6\1\151\6\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\13\6\1\152\6\6\1\0\1\6\5\0"+
    "\3\6\1\0\3\6\12\0\4\6\1\153\15\6\1\0"+
    "\1\6\5\0\3\6\1\0\3\6\12\0\11\6\1\154"+
    "\10\6\1\0\1\6\5\0\3\6\1\0\3\6\12\0"+
    "\1\155\21\6\1\0\1\6\5\0\3\6\1\0\3\6"+
    "\12\0\13\6\1\156\6\6\1\0\1\6\5\0\3\6"+
    "\1\0\3\6\12\0\17\6\1\157\2\6\1\0\1\6"+
    "\5\0\3\6\1\0\3\6\12\0\16\6\1\160\3\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\16\6"+
    "\1\161\3\6\1\0\1\6\5\0\3\6\1\0\3\6"+
    "\12\0\3\6\1\162\16\6\1\0\1\6\5\0\3\6"+
    "\1\0\3\6\12\0\4\6\1\163\15\6\1\0\1\6"+
    "\5\0\3\6\1\0\3\6\12\0\7\6\1\164\12\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\1\165"+
    "\21\6\1\0\1\6\5\0\3\6\1\0\3\6\12\0"+
    "\13\6\1\166\6\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\1\0\1\167\10\0\22\6\1\0\1\6\5\0"+
    "\3\6\1\0\3\6\12\0\22\6\1\0\1\170\5\0"+
    "\3\6\1\0\3\6\12\0\4\6\1\171\15\6\1\0"+
    "\1\6\5\0\3\6\1\0\3\6\12\0\15\6\1\172"+
    "\4\6\1\0\1\6\5\0\3\6\1\0\3\6\12\0"+
    "\6\6\1\173\13\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\17\6\1\174\2\6\1\0\1\6\5\0"+
    "\3\6\1\0\3\6\12\0\6\6\1\175\13\6\1\0"+
    "\1\6\5\0\3\6\1\0\3\6\12\0\1\6\1\176"+
    "\20\6\1\0\1\6\5\0\3\6\1\177\3\6\12\0"+
    "\22\6\1\0\1\6\23\0\1\200\33\0\3\6\1\201"+
    "\3\6\12\0\22\6\1\0\1\6\5\0\3\6\1\0"+
    "\3\6\12\0\1\202\21\6\1\0\1\6\5\0\3\6"+
    "\1\0\3\6\12\0\4\6\1\203\15\6\1\0\1\6"+
    "\5\0\3\6\1\0\3\6\12\0\13\6\1\204\6\6"+
    "\1\0\1\6\36\0\1\205\30\0\1\206\72\0\1\207"+
    "\20\0\3\6\1\0\3\6\12\0\4\6\1\210\15\6"+
    "\1\0\1\6\5\0\3\6\1\0\3\6\12\0\1\211"+
    "\21\6\1\0\1\6\41\0\1\212\15\0\1\213\4\0"+
    "\1\213\13\0\22\213\1\0\1\213\41\0\1\214\15\0"+
    "\3\6\1\0\3\6\12\0\13\6\1\215\6\6\1\0"+
    "\1\6\5\0\3\6\1\0\3\6\12\0\22\6\1\0"+
    "\1\216\44\0\1\217\12\0\3\213\1\0\3\213\3\0"+
    "\1\220\6\0\22\213\1\0\1\213\44\0\1\221\12\0"+
    "\3\6\1\222\3\6\12\0\22\6\1\0\1\6\5\0"+
    "\3\6\1\223\3\6\12\0\22\6\1\0\1\6\37\0"+
    "\1\224\17\0\1\225\4\0\1\225\13\0\22\225\1\0"+
    "\1\225\37\0\1\226\50\0\1\227\51\0\1\230\50\0"+
    "\1\231\21\0\3\225\1\0\3\225\2\0\1\232\7\0"+
    "\22\225\1\0\1\225\35\0\1\233\55\0\1\234\51\0"+
    "\1\235\41\0\1\236\35\0\1\237\65\0\1\240\64\0"+
    "\1\241\51\0\1\242\34\0\1\243\30\0\1\244\1\0"+
    "\1\245\1\244\1\0\1\244\65\0\1\246\61\0\1\247"+
    "\51\0\1\250\20\0\1\244\1\0\1\251\1\244\1\0"+
    "\1\244\2\0\1\252\1\237\40\0\1\251\2\0\1\251"+
    "\1\0\1\251\73\0\1\253\51\0\1\254\22\0\1\251"+
    "\2\0\1\251\1\0\1\251\2\0\1\252\1\237\50\0"+
    "\1\255\64\0\1\256\51\0\1\257\47\0\1\260\51\0"+
    "\1\261\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6132];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\5\1\1\11\1\1\1\11"+
    "\1\1\1\11\15\1\1\0\1\11\1\1\2\0\21\1"+
    "\1\11\1\0\1\1\1\0\17\1\2\11\60\1\1\0"+
    "\7\1\3\0\3\1\3\0\2\1\3\0\2\1\24\0"+
    "\1\11\2\0\1\11\6\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
 * @throws Exception 
   */
  public Symbol next_token() throws Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    String resultados = "";
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            	//throw new Exception("Caracter no permitido: " + yytext() + "> en la linea " + yyline);
                resultados += "Caracter no permitido: <" + yytext() + "> \n";
            }
            // fall through
          case 36: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 37: break;
          case 3:
            {
              resultados += "Token ID encontrado, Lexema "+ yytext() + "\n";
            } 
            // fall through
          case 38: break;
          case 4: 
            {
              resultados += "Token CONST_INT, encontrado Lexema "+ yytext() + "\n";
            } 
            // fall through
          case 39: break;
          case 5: 
            {
              resultados += "Token SIMBOLO encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 40: break;
          case 6: 
            {
              resultados += "Token OP_LOGICO encontrado, Lexema "+ yytext() + "\n";
            } 
            // fall through
          case 41: break;
          case 7: 
            {
              resultados += "Token OP_ARITMETICO encontrado, Lexema "+ yytext() + "\n";
            } 
            // fall through
          case 42: break;
          case 8: 
            {
              resultados += "Token CONST_STRING encontrado, Lexema "+ yytext() + "\n";
            } 
            // fall through
          case 43: break;
          case 9: 
            {
              resultados += "Token CONST_REAL, encontrado Lexema "+ yytext() + "\n";
            } 
            // fall through
          case 44: break;
          case 10: 
            {
              resultados += "Token COMENTARIO encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 45: break;
          case 11: 
            {
              resultados += "Token IF encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 46: break;
          case 12: 
            {
              resultados += "Token DECLARATION encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 47: break;
          case 13: 
            {
              resultados += "Token CONST_B encontrado, Lexema "+ yytext() + "\n";
            } 
            // fall through
          case 48: break;
          case 14: 
            {
              resultados += "Token FOR encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 49: break;
          case 15: 
            {
              resultados += "Token ASIGN encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 50: break;
          case 16: 
            {
              resultados += "Token TRUE encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 51: break;
          case 17: 
            {
              resultados += "Token ELSE encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 52: break;
          case 18: 
            {
              resultados += "Token RANGE encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 53: break;
          case 19: 
            {
              resultados += "Token FALSE encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 54: break;
          case 20: 
            {
              resultados += "Token FLOAT encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 55: break;
          case 21: 
            {
              resultados += "Token ENDIF encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 56: break;
          case 22: 
            {
              resultados += "Token WRITE encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 57: break;
          case 23: 
            {
              resultados += "Token WHILE encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 58: break;
          case 24: 
            {
              resultados += "Token OPLIST encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 59: break;
          case 25: 
            {
              resultados += "Token STRING encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 60: break;
          case 26: 
            {
              resultados += "Token ENDFOR encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 61: break;
          case 27: 
            {
              resultados += "Token INTEGER encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 62: break;
          case 28: 
            {
              resultados += "Token FOREACH encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 63: break;
          case 29: 
            {
              resultados += "Token BOOLEAN encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 64: break;
          case 30: 
            {
              resultados += "Token ENDWHILE encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 65: break;
          case 31: 
            {
              resultados += "Token DECLARE.SECTION encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 66: break;
          case 32: 
            {
              resultados += "Token PROGRAM.SECTION encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 67: break;
          case 33: 
            {
              resultados += "Token OPLIST encontrado, Lexema "+ yytext() + "\n";
            } 
            // fall through
          case 68: break;
          case 34: 
            {
              resultados += "Token ENDDECLARE.SECTION encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 69: break;
          case 35: 
            {
              resultados += "Token ENDPROGRAM.SECTION encontrado, Lexema "+yytext() + "\n";
            } 
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
      Resultado resultado = Resultado.getInstance();
      resultado.setContenido(resultados);
      String nombreArchivo = "ts.txt";
      guardarEnArchivo(resultado.getContenido(), nombreArchivo);
    }
  }

  public static void guardarEnArchivo(String contenido, String nombreArchivo) {
    try (FileWriter escritor = new FileWriter(nombreArchivo)) {
      escritor.write(contenido);
    } catch (IOException e) {
    }
  }

}
